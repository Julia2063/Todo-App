{"version":3,"sources":["types/Status.ts","utils/useLocalStorage.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","components/TodoApp/TodoApp.tsx","App.tsx","index.tsx"],"names":["Status","useLocalStorage","key","initialValue","useState","JSON","parse","localStorage","getItem","value","setValue","val","setItem","stringify","TodoItem","todo","handleToggle","handleDelete","changedTitleTodoId","handleEdit","newEditedTitle","handleInputChange","handleBlur","handleKeyDown","id","title","completed","inputRef","useRef","useEffect","current","focus","className","classNames","editing","name","type","onChange","checked","onDoubleClick","onClick","ref","event","onBlur","onKeyDown","placeholder","TodoList","todos","TransitionGroup","map","CSSTransition","timeout","filterStatus","Object","values","TodosFilter","el","to","toLowerCase","isActive","selected","TodoApp","newTodoTitle","setNewTodoTitle","setTodos","copyTodos","setCopyTodos","setChangedTitleTodoId","status","useParams","activeTodosLength","useMemo","filter","length","activeToggleAll","setActiveToggleAll","setNewEditedTitle","completedTodos","param","target","visibledTodos","ACTIVE","COMPLETED","deleteTodo","index","findIndex","newTodos","_todo","i","updateTitle","updatedTodo","find","onSubmit","preventDefault","newTitle","trim","newTodo","Date","htmlFor","updatedTodoCompleted","currentTarget","changedTodoTitleId","code","App","path","element","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c7667d79.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import { useState } from 'react';\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, (arg0: T) => void] {\n  const [value, setValue] = useState<T>(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key) as string) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const save = (val: T) => {\n    setValue(val);\n    localStorage.setItem(key, JSON.stringify(val));\n  };\n\n  return [value, save];\n}\n","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n  handleToggle: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleDelete: (event: React.MouseEvent<HTMLButtonElement>) => void,\n  changedTitleTodoId: number | null,\n  handleEdit: (event: React.MouseEvent<HTMLLabelElement>) => void,\n  newEditedTitle: string,\n  handleInputChange:\n  (event: React.ChangeEvent<HTMLInputElement>, param: string) => void,\n  handleBlur: () => void,\n  handleKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void,\n}\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  handleToggle,\n  handleDelete,\n  changedTitleTodoId,\n  handleEdit,\n  newEditedTitle,\n  handleInputChange,\n  handleBlur,\n  handleKeyDown,\n}) => {\n  const { id, title, completed } = todo;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [changedTitleTodoId]);\n\n  return (\n    <li\n      key={id}\n      className={classNames({ editing: changedTitleTodoId === id, completed })}\n    >\n      <div className=\"view\">\n        <input\n          name={`${id}`}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          onChange={handleToggle}\n          checked={completed}\n\n        />\n        <label\n          id={`${id}`}\n          title={title}\n          onDoubleClick={handleEdit}\n        >\n          {title}\n        </label>\n        <button\n          name={`${id}`}\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          aria-label=\"Mute volume\"\n          onClick={handleDelete}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newEditedTitle}\n        ref={inputRef}\n        onChange={(event) => handleInputChange(event, 'updateTittle')}\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Empty todo will be deleted\"\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ninterface Props {\n  todos: Todo[];\n  handleToggle: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleDelete: (event: React.MouseEvent<HTMLButtonElement>) => void,\n  changedTitleTodoId: number | null,\n  handleEdit: (event: React.MouseEvent<HTMLLabelElement>) => void,\n  newEditedTitle: string,\n  handleInputChange:\n  (event: React.ChangeEvent<HTMLInputElement>, param: string) => void,\n  handleBlur: () => void,\n  handleKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  handleToggle,\n  handleDelete,\n  changedTitleTodoId,\n  handleEdit,\n  newEditedTitle,\n  handleInputChange,\n  handleBlur,\n  handleKeyDown,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todosList\">\n      <TransitionGroup>\n        {todos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={todo}\n              handleToggle={handleToggle}\n              handleDelete={handleDelete}\n              changedTitleTodoId={changedTitleTodoId}\n              handleEdit={handleEdit}\n              newEditedTitle={newEditedTitle}\n              handleInputChange={handleInputChange}\n              handleBlur={handleBlur}\n              handleKeyDown={handleKeyDown}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Status } from '../../types/Status';\n\nconst filterStatus = Object.values(Status);\n\nexport const TodosFilter: React.FC = () => (\n  <ul className=\"filters\" data-cy=\"todosFilter\">\n    {filterStatus.map(el => (\n      <li key={el}>\n        <NavLink\n          to={el === 'All' ? '/' : `../${el.toLowerCase()}`}\n          className={({ isActive }) => classNames({ selected: isActive })}\n        >\n          {el}\n        </NavLink>\n      </li>\n    ))}\n  </ul>\n);\n","import React, {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\nimport { useLocalStorage } from '../../utils/useLocalStorage';\nimport { TodoList } from '../TodoList';\nimport { TodosFilter } from '../TodosFilter';\n\nexport const TodoApp = () => {\n  const [newTodoTitle, setNewTodoTitle] = useState<string>('');\n  const [todos, setTodos] = useLocalStorage<Todo[]>('todos', []);\n\n  const [copyTodos, setCopyTodos] = useLocalStorage<Todo[]>('todos', []);\n\n  const [changedTitleTodoId, setChangedTitleTodoId]\n    = useState<number | null>(null);\n\n  const { status } = useParams();\n\n  const activeTodosLength = useMemo(() => (\n    copyTodos.filter(el => !el.completed).length\n  ), [copyTodos]);\n\n  const [activeToggleAll, setActiveToggleAll]\n    = useState(false);\n  const [newEditedTitle, setNewEditedTitle] = useState('');\n\n  useEffect(() => {\n    setActiveToggleAll(activeTodosLength === 0);\n  }, [activeTodosLength]);\n\n  const completedTodos = useMemo(() => (\n    copyTodos.filter(todo => todo.completed)), [copyTodos]);\n\n  const createNewTodo = (title: string): Todo => ({\n    id: +new Date(),\n    title,\n    completed: false,\n  });\n\n  const handleInputChange\n  = (event: React.ChangeEvent<HTMLInputElement>, param: string) => {\n    const { value } = event.target;\n\n    if (param === 'newTodo') {\n      setNewTodoTitle(value);\n    }\n\n    if (param === 'updateTittle') {\n      setNewEditedTitle(value);\n    }\n  };\n\n  const handleSubmitNewTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newTitle = newTodoTitle.trim();\n\n    if (newTitle.length === 0) {\n      setNewTodoTitle('');\n\n      return;\n    }\n\n    const newTodo = createNewTodo(newTitle);\n    const newTodos = copyTodos ? [...copyTodos, newTodo] : [newTodo];\n\n    setTodos(newTodos);\n    setCopyTodos(newTodos);\n\n    setNewTodoTitle('');\n  };\n\n  const handleToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = event.target;\n    const updatedTodoCompleted = todos.find(todo => todo.id === +name);\n\n    if (updatedTodoCompleted) {\n      updatedTodoCompleted.completed = !updatedTodoCompleted.completed;\n    }\n\n    setTodos([...todos]);\n    setCopyTodos([...copyTodos]);\n  };\n\n  const handleToggleAll = () => {\n    const newTodos = copyTodos.map(todo => (\n      { ...todo, completed: !activeToggleAll }\n    ));\n\n    setTodos(newTodos);\n    setCopyTodos(newTodos);\n  };\n\n  useEffect(() => {\n    const visibledTodos = copyTodos.filter(todo => {\n      switch (status) {\n        case Status.ACTIVE.toLowerCase():\n          return !todo.completed;\n\n        case Status.COMPLETED.toLowerCase():\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n\n    setTodos(visibledTodos);\n  }, [status, copyTodos, activeToggleAll]);\n\n  const deleteTodo = (id: number) => {\n    const index = copyTodos.findIndex(todo => todo.id === id);\n\n    const newTodos = copyTodos.filter((_todo, i) => i !== index);\n\n    setTodos(newTodos);\n    setCopyTodos(newTodos);\n  };\n\n  const handleDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { name } = event.currentTarget;\n\n    deleteTodo(+name);\n  };\n\n  const handleClearCompleted = () => {\n    const newTodos = copyTodos.filter(todo => !todo.completed);\n\n    setTodos(newTodos);\n    setCopyTodos(newTodos);\n  };\n\n  const handleEdit = (event: React.MouseEvent<HTMLLabelElement>) => {\n    const { id, title } = event.currentTarget;\n\n    const changedTodoTitleId = todos.find(todo => todo.id === +id)?.id;\n\n    setChangedTitleTodoId(changedTodoTitleId as number);\n    setNewEditedTitle(title);\n  };\n\n  const updateTitle = () => {\n    const updatedTodo = todos.find(todo => todo.id === changedTitleTodoId);\n\n    if (newEditedTitle === updatedTodo?.title) {\n      setChangedTitleTodoId(null);\n\n      return;\n    }\n\n    if (newEditedTitle.length === 0 && changedTitleTodoId) {\n      deleteTodo(changedTitleTodoId);\n\n      setChangedTitleTodoId(null);\n\n      return;\n    }\n\n    if (updatedTodo) {\n      updatedTodo.title = newEditedTitle;\n      setTodos([...todos]);\n      setCopyTodos([...todos]);\n    }\n\n    setChangedTitleTodoId(null);\n  };\n\n  const handleBlur = () => {\n    updateTitle();\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Escape'\n    || event.code === 'Enter'\n    || event.code === 'NumpadEnter') {\n      updateTitle();\n    }\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmitNewTodo}>\n          <input\n            type=\"text\"\n            data-cy=\"createTodo\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={(event) => handleInputChange(event, 'newTodo')}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        {copyTodos.length > 0 && (\n          <>\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              data-cy=\"toggleAll\"\n              checked={activeToggleAll}\n              onChange={handleToggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        )}\n        <TodoList\n          todos={todos}\n          handleToggle={handleToggle}\n          handleDelete={handleDelete}\n          changedTitleTodoId={changedTitleTodoId}\n          handleEdit={handleEdit}\n          newEditedTitle={newEditedTitle}\n          handleInputChange={handleInputChange}\n          handleBlur={handleBlur}\n          handleKeyDown={handleKeyDown}\n        />\n      </section>\n\n      {((copyTodos.length > 0 && todos.length > 0)\n       || copyTodos.length > 0\n       || (status === Status.COMPLETED.toLowerCase()\n        && completedTodos.length === 0 && copyTodos.length > 0)) && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\" data-cy=\"todosCounter\">\n            {`${activeTodosLength} items left`}\n          </span>\n\n          <TodosFilter />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={handleClearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n\n        </footer>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { TodoApp } from './components/TodoApp';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\">\n        <Route index element={(<TodoApp />)} />\n        <Route path=\":status\" element={(<TodoApp />)} />\n      </Route>\n    </Routes>\n  );\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\n\nconst Root: React.FC = () => (\n  <HashRouter>\n    <App />\n  </HashRouter>\n\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}